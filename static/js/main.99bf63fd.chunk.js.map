{"version":3,"sources":["components/Card/Card.component.jsx","components/CardList/CardList.component.jsx","components/Search/SearchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","data","className","alt","name","src","id","email","CardList","map","u","key","SearchBox","onChange","value","onSubmit","e","preventDefault","type","placeholder","target","App","handleChange","element","setState","handleSubmit","filteredData","state","origin","filter","toLowerCase","includes","searchKey","toLocaleLowerCase","users","fetch","then","res","json","prevProps","prevState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAceA,G,MAXF,SAAAC,GAAU,IACdC,EAAQD,EAARC,KACP,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAKF,EAAKG,KAAMC,IAAG,+BAA0BJ,EAAKK,GAA/B,6BACxB,4BAAKL,EAAKG,MACV,2BAAIH,EAAKM,UCMAC,G,MAXE,SAAAR,GACf,OACE,yBAAKE,UAAU,aACZF,EAAMC,MACLD,EAAMC,KAAKQ,KAAI,SAAAC,GACb,OAAO,kBAAC,EAAD,CAAMT,KAAMS,EAAGC,IAAKD,EAAEJ,WCsBxBM,G,MA5BG,SAAAZ,GAAU,IACnBa,EAA6Bb,EAA7Ba,SAAUC,EAAmBd,EAAnBc,MAAOC,EAAYf,EAAZe,SAWxB,OACE,6BACE,0BAAMA,SANa,SAAAC,GACrBA,EAAEC,iBACFF,EAASC,KAKL,2BACEE,KAAK,OACLJ,MAAOA,EACPV,KAAK,YACLe,YAAY,iBACZN,SAlBe,SAAAG,GACrBA,EAAEC,iBADwB,IAGnBG,EAAUJ,EAAVI,OACPP,EAASO,IAeHlB,UAAU,eC6CLmB,G,kBA/Db,aAAe,IAAD,8BACZ,+CASFC,aAAe,SAAAC,GACb,EAAKC,SAAL,eACGD,EAAQnB,KAAOmB,EAAQT,SAZd,EAgBdW,aAAe,SAAAT,GACb,IACMU,EADQ,EAAKC,MAAMC,OACEC,QAAO,SAAAnB,GAChC,OAAOA,EAAEN,KAAK0B,cAAcC,SAAS,EAAKJ,MAAMK,UAAUC,wBAG5D,EAAKT,SAAS,CACZU,MAAOR,KApBT,EAAKC,MAAQ,CACXO,MAAO,GACPN,OAAQ,GACRI,UAAW,IAND,E,iFA2BO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAF,GAAK,OACT,EAAKV,SAAS,CACZU,QACAN,OAAQM,S,yCAKGK,EAAWC,GAAY,IAAD,OACvC,GAAIA,EAAUR,YAAcS,KAAKd,MAAMK,UAAW,CAChD,IACMN,EADQe,KAAKd,MAAMC,OACEC,QAAO,SAAAnB,GAChC,OAAOA,EAAEN,KAAK0B,cAAcC,SAAS,EAAKJ,MAAMK,UAAUC,wBAG5DQ,KAAKjB,SAAS,CACZU,MAAOR,O,+BAKH,IAAD,EACoBe,KAAKd,MAAzBK,EADA,EACAA,UAAWE,EADX,EACWA,MAClB,OACE,6BACE,wBAAIhC,UAAU,cAAd,kBACA,kBAAC,EAAD,CAAWW,SAAU4B,KAAKnB,aAAcR,MAAOkB,EAAWjB,SAAU0B,KAAKhB,eACzE,kBAAC,EAAD,CAAUxB,KAAMiC,S,GA1DNQ,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.99bf63fd.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.style.css';\n\nconst Card = props => {\n  const {data} = props;\n  return (\n    <div className=\"card-container\">\n      <img alt={data.name} src={`https://robohash.org/${data.id}?set=size2&size=180x180`} />\n      <h2>{data.name}</h2>\n      <p>{data.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../Card/Card.component';\nimport './CardList.style.css';\n\nconst CardList = props => {\n  return (\n    <div className=\"card-list\">\n      {props.data &&\n        props.data.map(u => {\n          return <Card data={u} key={u.id} />;\n        })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\nimport './SearchBox.style.css';\n\nconst SearchBox = props => {\n  const {onChange, value, onSubmit} = props;\n  const handleOnChange = e => {\n    e.preventDefault();\n\n    const {target} = e;\n    onChange(target);\n  };\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    onSubmit(e);\n  };\n  return (\n    <div>\n      <form onSubmit={handleOnSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          name=\"searchKey\"\n          placeholder=\"Search monster\"\n          onChange={handleOnChange}\n          className=\"search\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, {Component} from 'react';\nimport CardList from './components/CardList/CardList.component';\nimport SearchBox from './components/Search/SearchBox.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      users: [],\n      origin: [],\n      searchKey: ''\n    };\n  }\n\n  handleChange = element => {\n    this.setState({\n      [element.name]: element.value\n    });\n  };\n\n  handleSubmit = e => {\n    const users = this.state.origin;\n    const filteredData = users.filter(u => {\n      return u.name.toLowerCase().includes(this.state.searchKey.toLocaleLowerCase());\n    });\n\n    this.setState({\n      users: filteredData\n    });\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users =>\n        this.setState({\n          users,\n          origin: users\n        })\n      );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchKey !== this.state.searchKey) {\n      const users = this.state.origin;\n      const filteredData = users.filter(u => {\n        return u.name.toLowerCase().includes(this.state.searchKey.toLocaleLowerCase());\n      });\n\n      this.setState({\n        users: filteredData\n      });\n    }\n  }\n\n  render() {\n    const {searchKey, users} = this.state;\n    return (\n      <div>\n        <h1 className=\"page-title\">Monster Roldex</h1>\n        <SearchBox onChange={this.handleChange} value={searchKey} onSubmit={this.handleSubmit} />\n        <CardList data={users} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}